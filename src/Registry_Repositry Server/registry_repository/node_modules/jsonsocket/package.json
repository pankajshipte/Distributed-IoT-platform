{
  "name": "jsonsocket",
  "version": "1.0.2",
  "description": "JSON socket",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:smmoosavi/jsonsocket.git"
  },
  "keywords": [
    "json",
    "socket",
    "tcp"
  ],
  "author": {
    "name": "smmoosavi"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/smmoosavi/jsonsocket/issues"
  },
  "homepage": "https://github.com/smmoosavi/jsonsocket",
  "dependencies": {
    "debug": "^2.1.1"
  },
  "devDependencies": {
    "chai": "^1.10.0",
    "mocha": "^2.1.0"
  },
  "readme": "# jsonsocket\nJSON socket\n\n## Install\n\n```\n$ npm install jsonsocket\n```\n\n## Usage\n\n```js\nvar JsonSocket = require('jsonsocket');\n```\n\n## Methods\n\n### `JsonSocket(options)`\n### `JsonSocket(port, [host])`\n### `JsonSocket(path)`\n\nCreate new json socket. Same as [`net.connect`](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener).\n\n```js\nvar socket = new JsonSocket(7000, '127.0.0.1');\n```\n\n### `JsonSocket(socket)`\n\nCreate new json socket from existing`net.Socket`\n\n```js\nvar net = require('net');\nvar server = net.createServer(function (con) {\n    var socket = new JsonSocket(con);\n}\n```\n\n### `write(data)`\n\nSend object over socket.\n\n```js\nsocket.write({foo: 'bar'});\n```\n### `disconnect()`\n\nDestroy connection\n\n### `connect(port, [host])`\n### `connect(path)`\n\nSame as [`net.Socket.connect`](http://nodejs.org/api/net.html#net_socket_connect_port_host_connectlistener)\n\n### `on(eventType, listener)`\n\nInherited from `events.EventEmitter`.\n\n## Events\n\n### connect\nEmitted when socket connected (only when you pass ip, port).\n\n### json\nEmitted when full json received.\n\n```js\nsocket.on('json', function (json) {\n    console.log(json);\n}\n```\n### disconnect\nEmitted when disconnected.\n\n### error\n\nEmitted when net.Socket emit error.\n\n> Error events are treated as a special case in node. If there is no listener for it,\n> then the default action is to print a stack trace and exit the program.\n\n[see more](http://nodejs.org/api/events.html#events_class_events_eventemitter).\n\n### newListener, removeListener\n\nInherited from [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter).\n\n## Logging\n\nYou can enable logging. [See more](https://github.com/visionmedia/debug)\n\n```bash\n# disabled logging\nnode test.js\n\n# connect, disconnect log\nDEBUG=JsonSocket:connection node test.js\n\n# data log\nDEBUG=JsonSocket:data node test.js\n\n# all json socket logs\nDEBUG=JsonSocket:* node test.js\n```\n\n## Protocol\n\nWe send json objects over socket then write one `\\0`. This is c/c++ friendly protocol. :smile:\n\n```\n{\"x\": 3}\\0null\\0\"Hi\"\\0[]\\0\n```",
  "readmeFilename": "README.md",
  "_id": "jsonsocket@1.0.2",
  "dist": {
    "shasum": "1e9f1c9243d0093c62aa00f1a73c44818874a84c"
  },
  "_from": "jsonsocket@*",
  "_resolved": "https://registry.npmjs.org/jsonsocket/-/jsonsocket-1.0.2.tgz"
}
